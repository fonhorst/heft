from environment.EventAutomata import BaseEvent
from environment.ResourceManager import Schedule


class TaskFinished(BaseEvent):
    def __init__(self):
        self.task = None


class NodeFailed(BaseEvent):
    def __init__(self):
        self.task = None
        self.node = None

class NodeUp(BaseEvent):
    def __init__(self):
        self.node = None

##interface Executor
class Executor:
    def __init__(self):
        self.posting_entity = None

    def event_arrived(self, event):
        pass

    def post_event(self, event):
        self.posting_entity.post(event)
    pass

class GAExecutor(Executor):
    def __init__(self, initial_schedule):
        self.initial_schedule = initial_schedule
        self.schedule = Schedule({node: [] for node in initial_schedule.mapping.keys()})
        pass

    def event_arrived(self, event):
        if isinstance(event, TaskFinished):

            ##check_valid_event()

            current_time = event.time_happened
            to_run = []
            task = event.task
            # get next task to run on this node
            nt = next_task(initial_schedule, task)
            if check_run(nt, current_time):
                to_run.append(nt)
            ready_children = get_ready_tasks(schedule, task)

            for child in ready_children:
                if check_run(child, current_time):
                    to_run.append(child)

            for tk in to_run:
                (node, scitem) = get_node_and_item(initial_schedule, tk, current_time)
                self.schedule.mapping[node].append(scitem)
                run((node,scitem))

            ## 1. obtain ready tasks
            ## 2. for every task check if it can be started
            ## 3. modify schedule
            ## 4. run it
            return None
        if isinstance(event, NodeFailed):
            ## 1. return failed task to unstarted state
            task = event.task
            node = event.node
            check_task_failed(self.schedule, task)
            check_node_down(node)
            ##TODO: generate proper event when use run func
            ##invalidate_linked_events()
            return None
        if isinstance(event, NodeUp):
            ## 1. get ready tasks for this node
            ## 2. run it
            nt = next_task(initial_schedule, task)
            if check_run(nt, current_time):
                to_run.append(nt)

             for tk in to_run:
                (node, scitem) = get_node_and_item(initial_schedule, tk, current_time)
                self.schedule.mapping[node].append(scitem)
                run((node,scitem))
            return None
    pass

## validation
## 1. std validate schedule generated by GAExecutor (modify for accounting failed tasks)
## 2. get intervals of unavailability and check accordance with the generated schedule

